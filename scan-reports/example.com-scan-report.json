[
      {
            "sourceid": "3",
            "other": "",
            "method": "GET",
            "evidence": "max-age=604800",
            "pluginId": "10049",
            "cweid": "524",
            "confidence": "Medium",
            "wascid": "13",
            "description": "The response contents are storable by caching components such as proxy servers, and may be retrieved directly from the cache, rather than from the origin server by the caching servers, in response to similar requests from other users.  If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where \"shared\" caching servers such as \"proxy\" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance.",
            "messageId": "1",
            "inputVector": "",
            "url": "https://example.com/",
            "tags": {
                  "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
            },
            "reference": "https://datatracker.ietf.org/doc/html/rfc7234\nhttps://datatracker.ietf.org/doc/html/rfc7231\nhttps://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html",
            "solution": "Validate that the response does not contain sensitive, personal or user-specific information.  If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request. ",
            "alert": "Storable and Cacheable Content",
            "param": "",
            "attack": "",
            "name": "Storable and Cacheable Content",
            "risk": "Informational",
            "id": "0",
            "alertRef": "10049"
      },
      {
            "sourceid": "3",
            "other": "",
            "method": "GET",
            "evidence": "",
            "pluginId": "10063",
            "cweid": "693",
            "confidence": "Medium",
            "wascid": "15",
            "description": "Permissions Policy Header is an added layer of security that helps to restrict from unauthorized access or usage of browser/client features by web resources. This policy ensures the user privacy by limiting or specifying the features of the browsers can be used by the web resources. Permissions Policy provides a set of standard HTTP headers that allow website owners to limit which features of browsers can be used by the page such as camera, microphone, location, full screen etc.",
            "messageId": "1",
            "inputVector": "",
            "url": "https://example.com/",
            "tags": {
                  "OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
                  "OWASP_2017_A05": "https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html"
            },
            "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Permissions-Policy\nhttps://developer.chrome.com/blog/feature-policy/\nhttps://scotthelme.co.uk/a-new-security-header-feature-policy/\nhttps://w3c.github.io/webappsec-feature-policy/\nhttps://www.smashingmagazine.com/2018/12/feature-policy/",
            "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Permissions-Policy header.",
            "alert": "Permissions Policy Header Not Set",
            "param": "",
            "attack": "",
            "name": "Permissions Policy Header Not Set",
            "risk": "Low",
            "id": "1",
            "alertRef": "10063-1"
      },
      {
            "sourceid": "3",
            "other": "",
            "method": "GET",
            "evidence": "",
            "pluginId": "10020",
            "cweid": "1021",
            "confidence": "Medium",
            "wascid": "15",
            "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
            "messageId": "1",
            "inputVector": "",
            "url": "https://example.com/",
            "tags": {
                  "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
                  "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
                  "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
            },
            "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
            "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
            "alert": "Missing Anti-clickjacking Header",
            "param": "x-frame-options",
            "attack": "",
            "name": "Missing Anti-clickjacking Header",
            "risk": "Medium",
            "id": "2",
            "alertRef": "10020-1"
      },
      {
            "sourceid": "3",
            "other": "",
            "method": "GET",
            "evidence": "max-age=604800",
            "pluginId": "10015",
            "cweid": "525",
            "confidence": "Low",
            "wascid": "13",
            "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
            "messageId": "1",
            "inputVector": "",
            "url": "https://example.com/",
            "tags": {
                  "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
            },
            "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/",
            "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
            "alert": "Re-examine Cache-control Directives",
            "param": "cache-control",
            "attack": "",
            "name": "Re-examine Cache-control Directives",
            "risk": "Informational",
            "id": "3",
            "alertRef": "10015"
      },
      {
            "sourceid": "3",
            "other": "",
            "method": "GET",
            "evidence": "",
            "pluginId": "10038",
            "cweid": "693",
            "confidence": "High",
            "wascid": "15",
            "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
            "messageId": "1",
            "inputVector": "",
            "url": "https://example.com/",
            "tags": {
                  "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
                  "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
            },
            "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
            "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
            "alert": "Content Security Policy (CSP) Header Not Set",
            "param": "",
            "attack": "",
            "name": "Content Security Policy (CSP) Header Not Set",
            "risk": "Medium",
            "id": "4",
            "alertRef": "10038-1"
      },
      {
            "sourceid": "3",
            "other": "",
            "method": "GET",
            "evidence": "HIT",
            "pluginId": "10050",
            "cweid": "-1",
            "confidence": "Medium",
            "wascid": "-1",
            "description": "The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as \"proxy\" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ",
            "messageId": "1",
            "inputVector": "",
            "url": "https://example.com/",
            "tags": {
                  "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
            },
            "reference": "https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttp://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html (obsoleted by rfc7234)",
            "solution": "Validate that the response does not contain sensitive, personal or user-specific information.  If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.",
            "alert": "Retrieved from Cache",
            "param": "",
            "attack": "",
            "name": "Retrieved from Cache",
            "risk": "Informational",
            "id": "5",
            "alertRef": "10050"
      },
      {
            "sourceid": "3",
            "other": "",
            "method": "GET",
            "evidence": "ECS (bsb/27B9)",
            "pluginId": "10036",
            "cweid": "200",
            "confidence": "High",
            "wascid": "13",
            "description": "The web/application server is leaking version information via the \"Server\" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.",
            "messageId": "1",
            "inputVector": "",
            "url": "https://example.com/",
            "tags": {
                  "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
                  "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html",
                  "WSTG-v42-INFO-02": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server"
            },
            "reference": "http://httpd.apache.org/docs/current/mod/core.html#servertokens\nhttp://msdn.microsoft.com/en-us/library/ff648552.aspx#ht_urlscan_007\nhttp://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx\nhttp://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html",
            "solution": "Ensure that your web server, application server, load balancer, etc. is configured to suppress the \"Server\" header or provide generic details.",
            "alert": "Server Leaks Version Information via \"Server\" HTTP Response Header Field",
            "param": "",
            "attack": "",
            "name": "Server Leaks Version Information via \"Server\" HTTP Response Header Field",
            "risk": "Low",
            "id": "6",
            "alertRef": "10036"
      },
      {
            "sourceid": "3",
            "other": "",
            "method": "GET",
            "evidence": "",
            "pluginId": "10035",
            "cweid": "319",
            "confidence": "High",
            "wascid": "15",
            "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
            "messageId": "1",
            "inputVector": "",
            "url": "https://example.com/",
            "tags": {
                  "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
                  "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
            },
            "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
            "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
            "alert": "Strict-Transport-Security Header Not Set",
            "param": "",
            "attack": "",
            "name": "Strict-Transport-Security Header Not Set",
            "risk": "Low",
            "id": "7",
            "alertRef": "10035"
      },
      {
            "sourceid": "3",
            "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
            "method": "GET",
            "evidence": "",
            "pluginId": "10021",
            "cweid": "693",
            "confidence": "Medium",
            "wascid": "15",
            "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
            "messageId": "1",
            "inputVector": "",
            "url": "https://example.com/",
            "tags": {
                  "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
                  "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
            },
            "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
            "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
            "alert": "X-Content-Type-Options Header Missing",
            "param": "x-content-type-options",
            "attack": "",
            "name": "X-Content-Type-Options Header Missing",
            "risk": "Low",
            "id": "8",
            "alertRef": "10021"
      },
      {
            "sourceid": "3",
            "other": "",
            "method": "GET",
            "evidence": "max-age=604800",
            "pluginId": "10049",
            "cweid": "524",
            "confidence": "Medium",
            "wascid": "13",
            "description": "The response contents are storable by caching components such as proxy servers, and may be retrieved directly from the cache, rather than from the origin server by the caching servers, in response to similar requests from other users.  If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where \"shared\" caching servers such as \"proxy\" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance.",
            "messageId": "7",
            "inputVector": "",
            "url": "https://example.com",
            "tags": {
                  "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
            },
            "reference": "https://datatracker.ietf.org/doc/html/rfc7234\nhttps://datatracker.ietf.org/doc/html/rfc7231\nhttps://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html",
            "solution": "Validate that the response does not contain sensitive, personal or user-specific information.  If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request. ",
            "alert": "Storable and Cacheable Content",
            "param": "",
            "attack": "",
            "name": "Storable and Cacheable Content",
            "risk": "Informational",
            "id": "9",
            "alertRef": "10049"
      },
      {
            "sourceid": "3",
            "other": "",
            "method": "GET",
            "evidence": "max-age=604800",
            "pluginId": "10049",
            "cweid": "524",
            "confidence": "Medium",
            "wascid": "13",
            "description": "The response contents are storable by caching components such as proxy servers, and may be retrieved directly from the cache, rather than from the origin server by the caching servers, in response to similar requests from other users.  If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where \"shared\" caching servers such as \"proxy\" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance.",
            "messageId": "8",
            "inputVector": "",
            "url": "https://example.com/sitemap.xml",
            "tags": {
                  "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
            },
            "reference": "https://datatracker.ietf.org/doc/html/rfc7234\nhttps://datatracker.ietf.org/doc/html/rfc7231\nhttps://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html",
            "solution": "Validate that the response does not contain sensitive, personal or user-specific information.  If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request. ",
            "alert": "Storable and Cacheable Content",
            "param": "",
            "attack": "",
            "name": "Storable and Cacheable Content",
            "risk": "Informational",
            "id": "10",
            "alertRef": "10049"
      },
      {
            "sourceid": "3",
            "other": "",
            "method": "GET",
            "evidence": "",
            "pluginId": "10063",
            "cweid": "693",
            "confidence": "Medium",
            "wascid": "15",
            "description": "Permissions Policy Header is an added layer of security that helps to restrict from unauthorized access or usage of browser/client features by web resources. This policy ensures the user privacy by limiting or specifying the features of the browsers can be used by the web resources. Permissions Policy provides a set of standard HTTP headers that allow website owners to limit which features of browsers can be used by the page such as camera, microphone, location, full screen etc.",
            "messageId": "7",
            "inputVector": "",
            "url": "https://example.com",
            "tags": {
                  "OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
                  "OWASP_2017_A05": "https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html"
            },
            "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Permissions-Policy\nhttps://developer.chrome.com/blog/feature-policy/\nhttps://scotthelme.co.uk/a-new-security-header-feature-policy/\nhttps://w3c.github.io/webappsec-feature-policy/\nhttps://www.smashingmagazine.com/2018/12/feature-policy/",
            "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Permissions-Policy header.",
            "alert": "Permissions Policy Header Not Set",
            "param": "",
            "attack": "",
            "name": "Permissions Policy Header Not Set",
            "risk": "Low",
            "id": "11",
            "alertRef": "10063-1"
      },
      {
            "sourceid": "3",
            "other": "",
            "method": "GET",
            "evidence": "",
            "pluginId": "10063",
            "cweid": "693",
            "confidence": "Medium",
            "wascid": "15",
            "description": "Permissions Policy Header is an added layer of security that helps to restrict from unauthorized access or usage of browser/client features by web resources. This policy ensures the user privacy by limiting or specifying the features of the browsers can be used by the web resources. Permissions Policy provides a set of standard HTTP headers that allow website owners to limit which features of browsers can be used by the page such as camera, microphone, location, full screen etc.",
            "messageId": "8",
            "inputVector": "",
            "url": "https://example.com/sitemap.xml",
            "tags": {
                  "OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
                  "OWASP_2017_A05": "https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html"
            },
            "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Permissions-Policy\nhttps://developer.chrome.com/blog/feature-policy/\nhttps://scotthelme.co.uk/a-new-security-header-feature-policy/\nhttps://w3c.github.io/webappsec-feature-policy/\nhttps://www.smashingmagazine.com/2018/12/feature-policy/",
            "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Permissions-Policy header.",
            "alert": "Permissions Policy Header Not Set",
            "param": "",
            "attack": "",
            "name": "Permissions Policy Header Not Set",
            "risk": "Low",
            "id": "12",
            "alertRef": "10063-1"
      },
      {
            "sourceid": "3",
            "other": "",
            "method": "GET",
            "evidence": "",
            "pluginId": "10038",
            "cweid": "693",
            "confidence": "High",
            "wascid": "15",
            "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
            "messageId": "8",
            "inputVector": "",
            "url": "https://example.com/sitemap.xml",
            "tags": {
                  "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
                  "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
            },
            "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
            "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
            "alert": "Content Security Policy (CSP) Header Not Set",
            "param": "",
            "attack": "",
            "name": "Content Security Policy (CSP) Header Not Set",
            "risk": "Medium",
            "id": "13",
            "alertRef": "10038-1"
      },
      {
            "sourceid": "3",
            "other": "The presence of the 'Age' header indicates that that a HTTP/1.1 compliant caching server is in use.",
            "method": "GET",
            "evidence": "Age: 368039",
            "pluginId": "10050",
            "cweid": "-1",
            "confidence": "Medium",
            "wascid": "-1",
            "description": "The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as \"proxy\" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ",
            "messageId": "8",
            "inputVector": "",
            "url": "https://example.com/sitemap.xml",
            "tags": {
                  "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
            },
            "reference": "https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttp://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html (obsoleted by rfc7234)",
            "solution": "Validate that the response does not contain sensitive, personal or user-specific information.  If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.",
            "alert": "Retrieved from Cache",
            "param": "",
            "attack": "",
            "name": "Retrieved from Cache",
            "risk": "Informational",
            "id": "14",
            "alertRef": "10050"
      },
      {
            "sourceid": "3",
            "other": "",
            "method": "GET",
            "evidence": "ECS (bsb/27B9)",
            "pluginId": "10036",
            "cweid": "200",
            "confidence": "High",
            "wascid": "13",
            "description": "The web/application server is leaking version information via the \"Server\" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.",
            "messageId": "8",
            "inputVector": "",
            "url": "https://example.com/sitemap.xml",
            "tags": {
                  "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
                  "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html",
                  "WSTG-v42-INFO-02": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server"
            },
            "reference": "http://httpd.apache.org/docs/current/mod/core.html#servertokens\nhttp://msdn.microsoft.com/en-us/library/ff648552.aspx#ht_urlscan_007\nhttp://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx\nhttp://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html",
            "solution": "Ensure that your web server, application server, load balancer, etc. is configured to suppress the \"Server\" header or provide generic details.",
            "alert": "Server Leaks Version Information via \"Server\" HTTP Response Header Field",
            "param": "",
            "attack": "",
            "name": "Server Leaks Version Information via \"Server\" HTTP Response Header Field",
            "risk": "Low",
            "id": "15",
            "alertRef": "10036"
      },
      {
            "sourceid": "3",
            "other": "",
            "method": "GET",
            "evidence": "",
            "pluginId": "10035",
            "cweid": "319",
            "confidence": "High",
            "wascid": "15",
            "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
            "messageId": "8",
            "inputVector": "",
            "url": "https://example.com/sitemap.xml",
            "tags": {
                  "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
                  "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
            },
            "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
            "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
            "alert": "Strict-Transport-Security Header Not Set",
            "param": "",
            "attack": "",
            "name": "Strict-Transport-Security Header Not Set",
            "risk": "Low",
            "id": "16",
            "alertRef": "10035"
      },
      {
            "sourceid": "3",
            "other": "",
            "method": "GET",
            "evidence": "max-age=604800",
            "pluginId": "10049",
            "cweid": "524",
            "confidence": "Medium",
            "wascid": "13",
            "description": "The response contents are storable by caching components such as proxy servers, and may be retrieved directly from the cache, rather than from the origin server by the caching servers, in response to similar requests from other users.  If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where \"shared\" caching servers such as \"proxy\" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance.",
            "messageId": "9",
            "inputVector": "",
            "url": "https://example.com/robots.txt",
            "tags": {
                  "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
            },
            "reference": "https://datatracker.ietf.org/doc/html/rfc7234\nhttps://datatracker.ietf.org/doc/html/rfc7231\nhttps://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html",
            "solution": "Validate that the response does not contain sensitive, personal or user-specific information.  If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request. ",
            "alert": "Storable and Cacheable Content",
            "param": "",
            "attack": "",
            "name": "Storable and Cacheable Content",
            "risk": "Informational",
            "id": "17",
            "alertRef": "10049"
      },
      {
            "sourceid": "3",
            "other": "",
            "method": "GET",
            "evidence": "",
            "pluginId": "10063",
            "cweid": "693",
            "confidence": "Medium",
            "wascid": "15",
            "description": "Permissions Policy Header is an added layer of security that helps to restrict from unauthorized access or usage of browser/client features by web resources. This policy ensures the user privacy by limiting or specifying the features of the browsers can be used by the web resources. Permissions Policy provides a set of standard HTTP headers that allow website owners to limit which features of browsers can be used by the page such as camera, microphone, location, full screen etc.",
            "messageId": "9",
            "inputVector": "",
            "url": "https://example.com/robots.txt",
            "tags": {
                  "OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
                  "OWASP_2017_A05": "https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html"
            },
            "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Permissions-Policy\nhttps://developer.chrome.com/blog/feature-policy/\nhttps://scotthelme.co.uk/a-new-security-header-feature-policy/\nhttps://w3c.github.io/webappsec-feature-policy/\nhttps://www.smashingmagazine.com/2018/12/feature-policy/",
            "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Permissions-Policy header.",
            "alert": "Permissions Policy Header Not Set",
            "param": "",
            "attack": "",
            "name": "Permissions Policy Header Not Set",
            "risk": "Low",
            "id": "18",
            "alertRef": "10063-1"
      },
      {
            "sourceid": "3",
            "other": "",
            "method": "GET",
            "evidence": "",
            "pluginId": "10038",
            "cweid": "693",
            "confidence": "High",
            "wascid": "15",
            "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
            "messageId": "9",
            "inputVector": "",
            "url": "https://example.com/robots.txt",
            "tags": {
                  "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
                  "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
            },
            "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
            "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
            "alert": "Content Security Policy (CSP) Header Not Set",
            "param": "",
            "attack": "",
            "name": "Content Security Policy (CSP) Header Not Set",
            "risk": "Medium",
            "id": "19",
            "alertRef": "10038-1"
      },
      {
            "sourceid": "3",
            "other": "",
            "method": "GET",
            "evidence": "",
            "pluginId": "10020",
            "cweid": "1021",
            "confidence": "Medium",
            "wascid": "15",
            "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
            "messageId": "7",
            "inputVector": "",
            "url": "https://example.com",
            "tags": {
                  "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
                  "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
                  "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
            },
            "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
            "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
            "alert": "Missing Anti-clickjacking Header",
            "param": "x-frame-options",
            "attack": "",
            "name": "Missing Anti-clickjacking Header",
            "risk": "Medium",
            "id": "20",
            "alertRef": "10020-1"
      },
      {
            "sourceid": "3",
            "other": "The presence of the 'Age' header indicates that that a HTTP/1.1 compliant caching server is in use.",
            "method": "GET",
            "evidence": "Age: 373903",
            "pluginId": "10050",
            "cweid": "-1",
            "confidence": "Medium",
            "wascid": "-1",
            "description": "The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as \"proxy\" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ",
            "messageId": "9",
            "inputVector": "",
            "url": "https://example.com/robots.txt",
            "tags": {
                  "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
            },
            "reference": "https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttp://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html (obsoleted by rfc7234)",
            "solution": "Validate that the response does not contain sensitive, personal or user-specific information.  If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.",
            "alert": "Retrieved from Cache",
            "param": "",
            "attack": "",
            "name": "Retrieved from Cache",
            "risk": "Informational",
            "id": "21",
            "alertRef": "10050"
      },
      {
            "sourceid": "3",
            "other": "",
            "method": "GET",
            "evidence": "ECS (bsb/27B9)",
            "pluginId": "10036",
            "cweid": "200",
            "confidence": "High",
            "wascid": "13",
            "description": "The web/application server is leaking version information via the \"Server\" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.",
            "messageId": "9",
            "inputVector": "",
            "url": "https://example.com/robots.txt",
            "tags": {
                  "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
                  "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html",
                  "WSTG-v42-INFO-02": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server"
            },
            "reference": "http://httpd.apache.org/docs/current/mod/core.html#servertokens\nhttp://msdn.microsoft.com/en-us/library/ff648552.aspx#ht_urlscan_007\nhttp://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx\nhttp://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html",
            "solution": "Ensure that your web server, application server, load balancer, etc. is configured to suppress the \"Server\" header or provide generic details.",
            "alert": "Server Leaks Version Information via \"Server\" HTTP Response Header Field",
            "param": "",
            "attack": "",
            "name": "Server Leaks Version Information via \"Server\" HTTP Response Header Field",
            "risk": "Low",
            "id": "22",
            "alertRef": "10036"
      },
      {
            "sourceid": "3",
            "other": "",
            "method": "GET",
            "evidence": "max-age=604800",
            "pluginId": "10015",
            "cweid": "525",
            "confidence": "Low",
            "wascid": "13",
            "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
            "messageId": "7",
            "inputVector": "",
            "url": "https://example.com",
            "tags": {
                  "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
            },
            "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/",
            "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
            "alert": "Re-examine Cache-control Directives",
            "param": "cache-control",
            "attack": "",
            "name": "Re-examine Cache-control Directives",
            "risk": "Informational",
            "id": "23",
            "alertRef": "10015"
      },
      {
            "sourceid": "3",
            "other": "",
            "method": "GET",
            "evidence": "",
            "pluginId": "10038",
            "cweid": "693",
            "confidence": "High",
            "wascid": "15",
            "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
            "messageId": "7",
            "inputVector": "",
            "url": "https://example.com",
            "tags": {
                  "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
                  "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
            },
            "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
            "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
            "alert": "Content Security Policy (CSP) Header Not Set",
            "param": "",
            "attack": "",
            "name": "Content Security Policy (CSP) Header Not Set",
            "risk": "Medium",
            "id": "24",
            "alertRef": "10038-1"
      },
      {
            "sourceid": "3",
            "other": "",
            "method": "GET",
            "evidence": "",
            "pluginId": "10035",
            "cweid": "319",
            "confidence": "High",
            "wascid": "15",
            "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
            "messageId": "9",
            "inputVector": "",
            "url": "https://example.com/robots.txt",
            "tags": {
                  "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
                  "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
            },
            "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
            "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
            "alert": "Strict-Transport-Security Header Not Set",
            "param": "",
            "attack": "",
            "name": "Strict-Transport-Security Header Not Set",
            "risk": "Low",
            "id": "25",
            "alertRef": "10035"
      },
      {
            "sourceid": "3",
            "other": "",
            "method": "GET",
            "evidence": "HIT",
            "pluginId": "10050",
            "cweid": "-1",
            "confidence": "Medium",
            "wascid": "-1",
            "description": "The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as \"proxy\" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ",
            "messageId": "7",
            "inputVector": "",
            "url": "https://example.com",
            "tags": {
                  "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
            },
            "reference": "https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttp://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html (obsoleted by rfc7234)",
            "solution": "Validate that the response does not contain sensitive, personal or user-specific information.  If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.",
            "alert": "Retrieved from Cache",
            "param": "",
            "attack": "",
            "name": "Retrieved from Cache",
            "risk": "Informational",
            "id": "26",
            "alertRef": "10050"
      },
      {
            "sourceid": "3",
            "other": "",
            "method": "GET",
            "evidence": "ECS (bsb/27B9)",
            "pluginId": "10036",
            "cweid": "200",
            "confidence": "High",
            "wascid": "13",
            "description": "The web/application server is leaking version information via the \"Server\" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.",
            "messageId": "7",
            "inputVector": "",
            "url": "https://example.com",
            "tags": {
                  "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
                  "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html",
                  "WSTG-v42-INFO-02": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server"
            },
            "reference": "http://httpd.apache.org/docs/current/mod/core.html#servertokens\nhttp://msdn.microsoft.com/en-us/library/ff648552.aspx#ht_urlscan_007\nhttp://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx\nhttp://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html",
            "solution": "Ensure that your web server, application server, load balancer, etc. is configured to suppress the \"Server\" header or provide generic details.",
            "alert": "Server Leaks Version Information via \"Server\" HTTP Response Header Field",
            "param": "",
            "attack": "",
            "name": "Server Leaks Version Information via \"Server\" HTTP Response Header Field",
            "risk": "Low",
            "id": "27",
            "alertRef": "10036"
      },
      {
            "sourceid": "3",
            "other": "",
            "method": "GET",
            "evidence": "",
            "pluginId": "10035",
            "cweid": "319",
            "confidence": "High",
            "wascid": "15",
            "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
            "messageId": "7",
            "inputVector": "",
            "url": "https://example.com",
            "tags": {
                  "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
                  "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
            },
            "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
            "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
            "alert": "Strict-Transport-Security Header Not Set",
            "param": "",
            "attack": "",
            "name": "Strict-Transport-Security Header Not Set",
            "risk": "Low",
            "id": "28",
            "alertRef": "10035"
      },
      {
            "sourceid": "3",
            "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
            "method": "GET",
            "evidence": "",
            "pluginId": "10021",
            "cweid": "693",
            "confidence": "Medium",
            "wascid": "15",
            "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
            "messageId": "7",
            "inputVector": "",
            "url": "https://example.com",
            "tags": {
                  "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
                  "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
            },
            "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
            "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
            "alert": "X-Content-Type-Options Header Missing",
            "param": "x-content-type-options",
            "attack": "",
            "name": "X-Content-Type-Options Header Missing",
            "risk": "Low",
            "id": "31",
            "alertRef": "10021"
      },
      {
            "sourceid": "3",
            "other": "",
            "method": "GET",
            "evidence": "ECS (bsb/27DC)",
            "pluginId": "10036",
            "cweid": "200",
            "confidence": "High",
            "wascid": "13",
            "description": "The web/application server is leaking version information via the \"Server\" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.",
            "messageId": "10",
            "inputVector": "",
            "url": "https://example.com/",
            "tags": {
                  "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
                  "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html",
                  "WSTG-v42-INFO-02": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server"
            },
            "reference": "http://httpd.apache.org/docs/current/mod/core.html#servertokens\nhttp://msdn.microsoft.com/en-us/library/ff648552.aspx#ht_urlscan_007\nhttp://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx\nhttp://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html",
            "solution": "Ensure that your web server, application server, load balancer, etc. is configured to suppress the \"Server\" header or provide generic details.",
            "alert": "Server Leaks Version Information via \"Server\" HTTP Response Header Field",
            "param": "",
            "attack": "",
            "name": "Server Leaks Version Information via \"Server\" HTTP Response Header Field",
            "risk": "Low",
            "id": "36",
            "alertRef": "10036"
      },
      {
            "sourceid": "1",
            "other": "Using the TRACE, OPTIONS, and TRACK methods, the following proxy servers have been identified between ZAP and the application/web server: \n- ECSF (bsb/27B9)\n- ECSF (bsb/278B)\n- ECS (bsb/27DC)\nThe following web/application server has been identified: \n- ECSF (laa/7B45)\n",
            "method": "GET",
            "evidence": "",
            "pluginId": "40025",
            "cweid": "200",
            "confidence": "Medium",
            "wascid": "45",
            "description": "3 proxy server(s) were detected or fingerprinted. This information helps a potential attacker to determine \n - A list of targets for an attack against the application.\n - Potential vulnerabilities on the proxy servers that service the application.\n - The presence or absence of any proxy-based components that might cause attacks against the application to be detected, prevented, or mitigated. ",
            "messageId": "216",
            "inputVector": "",
            "url": "https://example.com/",
            "tags": {
                  "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
                  "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
            },
            "reference": "https://tools.ietf.org/html/rfc7231#section-5.1.2",
            "solution": "Disable the 'TRACE' method on the proxy servers, as well as the origin web/application server.\nDisable the 'OPTIONS' method on the proxy servers, as well as the origin web/application server, if it is not required for other purposes, such as 'CORS' (Cross Origin Resource Sharing).\nConfigure the web and application servers with custom error pages, to prevent 'fingerprintable' product-specific error pages being leaked to the user in the event of HTTP errors, such as 'TRACK' requests for non-existent pages.\nConfigure all proxies, application servers, and web servers to prevent disclosure of the technology and version information in the 'Server' and 'X-Powered-By' HTTP response headers.\n",
            "alert": "Proxy Disclosure",
            "param": "",
            "attack": "TRACE, OPTIONS methods with 'Max-Forwards' header. TRACK method.",
            "name": "Proxy Disclosure",
            "risk": "Medium",
            "id": "39",
            "alertRef": "40025"
      },
      {
            "sourceid": "1",
            "other": "Using the TRACE, OPTIONS, and TRACK methods, the following proxy servers have been identified between ZAP and the application/web server: \n- ECSF (bsb/278B)\n- ECS (bsb/278B)\nThe following web/application server has been identified: \n- ECSF (laa/7BB2)\n",
            "method": "GET",
            "evidence": "",
            "pluginId": "40025",
            "cweid": "200",
            "confidence": "Medium",
            "wascid": "45",
            "description": "2 proxy server(s) were detected or fingerprinted. This information helps a potential attacker to determine \n - A list of targets for an attack against the application.\n - Potential vulnerabilities on the proxy servers that service the application.\n - The presence or absence of any proxy-based components that might cause attacks against the application to be detected, prevented, or mitigated. ",
            "messageId": "217",
            "inputVector": "",
            "url": "https://example.com",
            "tags": {
                  "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
                  "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
            },
            "reference": "https://tools.ietf.org/html/rfc7231#section-5.1.2",
            "solution": "Disable the 'TRACE' method on the proxy servers, as well as the origin web/application server.\nDisable the 'OPTIONS' method on the proxy servers, as well as the origin web/application server, if it is not required for other purposes, such as 'CORS' (Cross Origin Resource Sharing).\nConfigure the web and application servers with custom error pages, to prevent 'fingerprintable' product-specific error pages being leaked to the user in the event of HTTP errors, such as 'TRACK' requests for non-existent pages.\nConfigure all proxies, application servers, and web servers to prevent disclosure of the technology and version information in the 'Server' and 'X-Powered-By' HTTP response headers.\n",
            "alert": "Proxy Disclosure",
            "param": "",
            "attack": "TRACE, OPTIONS methods with 'Max-Forwards' header. TRACK method.",
            "name": "Proxy Disclosure",
            "risk": "Medium",
            "id": "40",
            "alertRef": "40025"
      },
      {
            "sourceid": "1",
            "other": "Using the TRACE, OPTIONS, and TRACK methods, the following proxy servers have been identified between ZAP and the application/web server: \n- ECSF (bsb/27B9)\n- ECSF (bsb/27DC)\n- ECS (bsb/27B9)\nThe following web/application server has been identified: \n- ECSF (laa/7B4B)\n",
            "method": "GET",
            "evidence": "",
            "pluginId": "40025",
            "cweid": "200",
            "confidence": "Medium",
            "wascid": "45",
            "description": "3 proxy server(s) were detected or fingerprinted. This information helps a potential attacker to determine \n - A list of targets for an attack against the application.\n - Potential vulnerabilities on the proxy servers that service the application.\n - The presence or absence of any proxy-based components that might cause attacks against the application to be detected, prevented, or mitigated. ",
            "messageId": "219",
            "inputVector": "",
            "url": "https://example.com/sitemap.xml",
            "tags": {
                  "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
                  "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
            },
            "reference": "https://tools.ietf.org/html/rfc7231#section-5.1.2",
            "solution": "Disable the 'TRACE' method on the proxy servers, as well as the origin web/application server.\nDisable the 'OPTIONS' method on the proxy servers, as well as the origin web/application server, if it is not required for other purposes, such as 'CORS' (Cross Origin Resource Sharing).\nConfigure the web and application servers with custom error pages, to prevent 'fingerprintable' product-specific error pages being leaked to the user in the event of HTTP errors, such as 'TRACK' requests for non-existent pages.\nConfigure all proxies, application servers, and web servers to prevent disclosure of the technology and version information in the 'Server' and 'X-Powered-By' HTTP response headers.\n",
            "alert": "Proxy Disclosure",
            "param": "",
            "attack": "TRACE, OPTIONS methods with 'Max-Forwards' header. TRACK method.",
            "name": "Proxy Disclosure",
            "risk": "Medium",
            "id": "41",
            "alertRef": "40025"
      },
      {
            "sourceid": "1",
            "other": "Using the TRACE, OPTIONS, and TRACK methods, the following proxy servers have been identified between ZAP and the application/web server: \n- ECSF (bsb/27DC)\n- ECS (bsb/27B9)\nThe following web/application server has been identified: \n- ECSF (laa/7B44)\n",
            "method": "GET",
            "evidence": "",
            "pluginId": "40025",
            "cweid": "200",
            "confidence": "Medium",
            "wascid": "45",
            "description": "2 proxy server(s) were detected or fingerprinted. This information helps a potential attacker to determine \n - A list of targets for an attack against the application.\n - Potential vulnerabilities on the proxy servers that service the application.\n - The presence or absence of any proxy-based components that might cause attacks against the application to be detected, prevented, or mitigated. ",
            "messageId": "222",
            "inputVector": "",
            "url": "https://example.com/robots.txt",
            "tags": {
                  "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
                  "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
            },
            "reference": "https://tools.ietf.org/html/rfc7231#section-5.1.2",
            "solution": "Disable the 'TRACE' method on the proxy servers, as well as the origin web/application server.\nDisable the 'OPTIONS' method on the proxy servers, as well as the origin web/application server, if it is not required for other purposes, such as 'CORS' (Cross Origin Resource Sharing).\nConfigure the web and application servers with custom error pages, to prevent 'fingerprintable' product-specific error pages being leaked to the user in the event of HTTP errors, such as 'TRACK' requests for non-existent pages.\nConfigure all proxies, application servers, and web servers to prevent disclosure of the technology and version information in the 'Server' and 'X-Powered-By' HTTP response headers.\n",
            "alert": "Proxy Disclosure",
            "param": "",
            "attack": "TRACE, OPTIONS methods with 'Max-Forwards' header. TRACK method.",
            "name": "Proxy Disclosure",
            "risk": "Medium",
            "id": "42",
            "alertRef": "40025"
      },
      {
            "sourceid": "1",
            "other": "ZAP attempted to connect via: http://example.com",
            "method": "GET",
            "evidence": "http://example.com",
            "pluginId": "10047",
            "cweid": "311",
            "confidence": "Medium",
            "wascid": "4",
            "description": "Content which was initially accessed via HTTPS (i.e.: using SSL/TLS encryption) is also accessible via HTTP (without encryption). ",
            "messageId": "260",
            "inputVector": "",
            "url": "https://example.com",
            "tags": {
                  "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
                  "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html",
                  "WSTG-v42-CRYP-03": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/03-Testing_for_Sensitive_Information_Sent_via_Unencrypted_Channels"
            },
            "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
            "solution": "Ensure that your web server, application server, load balancer, etc. is configured to only serve such content via HTTPS. Consider implementing HTTP Strict Transport Security.",
            "alert": "HTTPS Content Available via HTTP",
            "param": "",
            "attack": "",
            "name": "HTTPS Content Available via HTTP",
            "risk": "Low",
            "id": "43",
            "alertRef": "10047"
      },
      {
            "sourceid": "1",
            "other": "ZAP attempted to connect via: http://example.com/",
            "method": "GET",
            "evidence": "http://example.com/",
            "pluginId": "10047",
            "cweid": "311",
            "confidence": "Medium",
            "wascid": "4",
            "description": "Content which was initially accessed via HTTPS (i.e.: using SSL/TLS encryption) is also accessible via HTTP (without encryption). ",
            "messageId": "262",
            "inputVector": "",
            "url": "https://example.com/",
            "tags": {
                  "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
                  "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html",
                  "WSTG-v42-CRYP-03": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/03-Testing_for_Sensitive_Information_Sent_via_Unencrypted_Channels"
            },
            "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
            "solution": "Ensure that your web server, application server, load balancer, etc. is configured to only serve such content via HTTPS. Consider implementing HTTP Strict Transport Security.",
            "alert": "HTTPS Content Available via HTTP",
            "param": "",
            "attack": "",
            "name": "HTTPS Content Available via HTTP",
            "risk": "Low",
            "id": "44",
            "alertRef": "10047"
      }
]